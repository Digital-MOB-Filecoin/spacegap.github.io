{"version":3,"sources":["services/filecoin/index.js","App.js","serviceWorker.js","index.js"],"names":["d3","require","f","format","schema","testnet","fullNode","provider","BrowserProvider","client","LotusRPC","preCommitSchema","type","key","value","info","seal_proof","sector_number","sealed_cid","seal_rand_epoch","deal_ids","expiration","replace_capacity","replace_sector_deadline","replace_sector_partition","replace_sector_number","precommit_deposit","precommit_epoch","deal_weight","verified_deal_weight","load","a","chainGetNode","res","Obj","getData","head","path","state","Blocks","ParentStateRoot","data","Fil","methods","decode","asObject","fetchHead","chainHead","fetchDeposits","hash","StateReadState","Cids","precommitdeposits","State","PreCommitDeposits","locked","LockedFunds","collateral","Balance","available","getMiners","cached","window","localStorage","getItem","JSON","parse","fetch","json","miners","reduce","acc","curr","address","setItem","stringify","fetchDeadlines","Promise","all","StateMinerProvingDeadline","StateMinerDeadlines","deadline","deadlines","nextDeadlines","Array","map","_","i","Index","Close","LiveSectors","TotalSectors","FaultyPower","SectorsCount","d","FaultsCount","Raw","ActiveCount","fetchPreCommittedSectors","preCommittedSectors","PreCommitDeadlines","groups","Object","keys","SectorNumber","Expiry","Sectors","sort","b","Count","length","fetchSectors","StateMinerSectors","sectorList","console","log","filter","v","ID","number","sectorsCount","Home","useState","setMiners","useEffect","then","id","className","slice","href","Summary","condition","title","desc","Miner","minerId","useParams","setHead","fetchingHead","fetched","setInterval","canvasRef","React","useRef","context","setContext","miner","setMiner","mounted","deposits","preCommits","sectors","current","Blockies","render","seed","renderCtx","getContext","tag","en","location","flagEmoji","target","identicon","Height","Math","round","ceil","App","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ada18c62.chunk.js","sourcesContent":["import { LotusRPC } from '@filecoin-shipyard/lotus-client-rpc'\nimport { BrowserProvider } from '@filecoin-shipyard/lotus-client-provider-browser'\nimport Fil from 'js-hamt-filecoin'\nconst d3 = require('d3')\n\nconst f = d3.format('0.2f')\n\nconst schema = require('@filecoin-shipyard/lotus-client-schema').testnet\n  .fullNode\n\nconst endpointUrl = 'wss://lotus.jimpick.com/spacerace_api/0/node/rpc/v0'\nconst provider = new BrowserProvider(endpointUrl)\nconst client = new LotusRPC(provider, { schema })\n\nconst preCommitSchema = ({\n  type: 'hamt',\n  key: 'bigint',\n  value: {\n    info: {\n      seal_proof: 'int',\n      sector_number: 'int',\n      sealed_cid: 'cid',\n      seal_rand_epoch: 'int',\n      deal_ids: ['list', 'int'],\n      expiration: 'int',\n      replace_capacity: 'bool',\n      replace_sector_deadline: 'int',\n      replace_sector_partition: 'int',\n      replace_sector_number: 'int',\n    },\n    precommit_deposit: 'bigint',\n    precommit_epoch: 'int',\n    deal_weight: 'bigint',\n    verified_deal_weight: 'bigint',\n  },\n})\n\nconst load = async function (a) {\n  const res = await client.chainGetNode(a)\n  return res.Obj\n}\n\nconst getData = async function (head, path, schema) {\n  const state = head.Blocks[0].ParentStateRoot['/']\n  const data = (await client.chainGetNode(`${state}/${path}`)).Obj\n  return await Fil.methods.decode(schema, data).asObject(load)\n}\n\n\nexport const fetchHead = async () => {\n  return await client.chainHead()\n}\n\nexport const fetchDeposits = async (hash, head) => {\n  const state = await client.StateReadState(hash, head.Cids)\n  const precommitdeposits = state.State.PreCommitDeposits\n  const locked = state.State.LockedFunds\n  const collateral = state.Balance\n  const available = collateral - precommitdeposits - locked\n\n  return {\n    collateral: f(state.Balance / 1000000000000000000),\n    available: f(available / 1000000000000000000),\n    locked: f(locked / 1000000000000000000),\n    precommitdeposits: f(precommitdeposits / 1000000000000000000),\n  }\n}\n\nexport const getMiners = async () => {\n  const cached = window.localStorage.getItem('miners')\n  if (cached) return JSON.parse(cached)\n\n  const json = await (await fetch('https://filfox.info/api/v0/miner/list/power?pageSize=1000&page=0')).json()\n  const miners = json.miners.reduce((acc, curr) => {\n    acc[curr.address] = curr;\n    return acc\n  }, {})\n\n  window.localStorage.setItem('miners', JSON.stringify(miners))\n\n  return miners\n}\n\nexport const fetchDeadlines = async (hash, head) => {\n  const [deadline, deadlines] = await Promise.all([\n          client.StateMinerProvingDeadline(hash, head.Cids),\n          client.StateMinerDeadlines(hash, head.Cids)\n  ])\n\n  const nextDeadlines = [...Array(48)]\n        .map((_, i) => ({\n          ...deadlines[(deadline.Index + i) % 48],\n          Close: deadline.Close + i * 60}))\n        // .filter(d => d.TotalSectors)\n        .map(({Close, LiveSectors, TotalSectors, FaultyPower}) => ({Close, LiveSectors, TotalSectors, FaultyPower}))\n\n  const SectorsCount = deadlines\n        .map(d => +d.LiveSectors)\n        .reduce((acc, curr) => acc + curr, 0)\n\n  const FaultsCount = deadlines\n        .map(d => +d.FaultyPower.Raw)\n        .reduce((acc, curr) => acc + curr, 0) / (32*1024*1024*1024)\n\n  return {\n    nextDeadlines,\n    SectorsCount,\n    FaultsCount,\n    ActiveCount: SectorsCount - FaultsCount\n  }\n}\n\nexport const fetchPreCommittedSectors = async (hash, head) => {\n  const preCommittedSectors = await getData(head, `@Ha:${hash}/1/5`, preCommitSchema)\n  const PreCommitDeadlines = d3.groups(\n    Object.keys(preCommittedSectors)\n      .map(d => ({\n        SectorNumber: preCommittedSectors[d].info.sector_number,\n        Expiry: preCommittedSectors[d].precommit_epoch + (10000+1)\n      })),\n    d => d.Expiry)\n        .map(([Expiry, Sectors]) => ({\n          Expiry,\n          Sectors: Sectors.map(d => d.SectorNumber)\n        }))\n        .sort((a, b) => a.Expiry - b.Expiry)\n\n  return {PreCommitDeadlines, Count:  Object.keys(preCommittedSectors).length}\n}\n\nexport const fetchSectors = async (hash, head) => {\n  const sectorList = await client.StateMinerSectors(hash, null, null, head.Cids)\n  console.log('saved', sectorList.filter(v => v === 215428))\n  const Sectors = sectorList.reduce((acc, curr) => {\n    acc[curr.ID] = { number: curr.ID, state: 'committed', info: curr }\n    return acc\n  }, {})\n\n  // const faults = (await client.StateMinerFaults(hash, head.Cids)).reduce(\n  //   (acc, curr) => {\n  //     acc[curr] = true\n  //     return acc\n  //   },\n  //   {}\n  // )\n\n  // const recoveries = (\n  //   await client.StateMinerRecoveries(hash, head.Cids)\n  // ).reduce((acc, curr) => {\n  //   acc[curr] = true\n  //   return acc\n  // }, {})\n\n  const sectorsCount = Object.keys(Sectors).length\n  console.log('got sectors', Sectors)\n\n  return { sectorsCount, Sectors }\n}\n","import React, { useState, useEffect } from 'react'\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link,\n    useRouteMatch,\n    useParams\n} from \"react-router-dom\";\nimport {\n    fetchHead,\n    fetchSectors,\n    fetchDeadlines,\n    fetchPreCommittedSectors,\n    fetchDeposits,\n    getMiners\n} from './services/filecoin'\nimport Blockies from 'blockies-identicon'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.scss'\n\nconst d3 = require('d3')\nconst f = d3.format(',')\n\nfunction getJSONFromHistory (name) {\n    const prev = window.localStorage.getItem(name)\n    return prev && JSON.parse(prev)\n}\n\nfunction App () {\n\n    return (\n        <Router>\n            <div className='App'>\n                <header className='container-fluid'>\n                    <a href=\"/\">\n                        <h1 id=\"logo\" className='logo'>spacegap</h1>\n                    </a>\n                </header>\n                <Switch>\n                    <Route path='/miners/:minerId'>\n                        <section className='container'>\n                            <Miner />\n                        </section>\n                    </Route>\n                    <Route path='/'>\n                        <Home />\n                    </Route>\n                </Switch>\n            </div>\n        </Router>\n    )\n}\n\nfunction Home () {\n    const [miners, setMiners] = useState()\n\n    useEffect(() => {\n        getMiners().then(res => {\n            setMiners(res)\n        })\n    }, [])\n\n    return (\n        <section id='LookUp' className='container'>\n            Dashboard for Proof-of-Space mining\n\n            {miners && Object.keys(miners).slice(0, 50).map(d =>\n                <div>\n                    <a href={`./miners/${miners[d].address}`}>{miners[d].address}</a>\n                </div>\n            )}\n        </section>\n    )\n}\n\nconst PoSt = ({ epoch, posted, skipped }) => {\n    return (\n        <div>\n            Epoch {epoch}: {posted ? 'posted' : 'missed'}\n        </div>\n    )\n}\n\nconst Summary = ({condition, title, desc}) => {\n    return (\n        <div className=\"summary col-sm\">\n            <div className=\"summary-title\">\n                {title}\n            </div>\n            <div className=\"summary-desc\">\n                {desc}\n            </div>\n        </div>\n    )\n}\n\nconst Miner = () => {\n    let { minerId } = useParams();\n    console.log('bootstrap ', minerId)\n\n    const [head, setHead] = useState()\n    const [miners, setMiners] = useState()\n\n    useEffect(() => {\n        getMiners().then(res => {\n            setMiners(res)\n        })\n    }, [])\n\n    // Fetch head\n    useEffect(() => {\n        const fetchingHead = async () => {\n            const fetched = await fetchHead()\n            setHead(fetched)\n        }\n        fetchingHead()\n        setInterval(() => fetchingHead(), 30000)\n    }, [])\n\n    const canvasRef = React.useRef(null)\n    const [context, setContext] = React.useState(null)\n\n    const [miner, setMiner] = useState({id: minerId})\n\n    // On new (hash or head): fetch miner\n    useEffect(() => {\n        if (!minerId || !head) return;\n\n        let mounted = true\n        setMiner({...miner})\n\n        fetchDeadlines(minerId, head).then(deadlines => {\n            if (mounted) {\n                miner.deadlines = deadlines\n                setMiner({...miner})\n                /* window.localStorage.setItem(`miner_{minerId}`, JSON.stringify(miner)) */\n            }\n        })\n\n        fetchDeposits(minerId, head).then(deposits => {\n            if (mounted) {\n                miner.deposits = deposits\n                setMiner({...miner})\n                /* window.localStorage.setItem('miner', JSON.stringify(miner)) */\n            }\n        })\n\n        fetchPreCommittedSectors(minerId, head).then(preCommits => {\n            if (mounted) {\n                miner.preCommits = preCommits\n                setMiner({...miner})\n                /* window.localStorage.setItem('miner', JSON.stringify(miner)) */\n            }\n        })\n\n        fetchSectors(minerId, head).then(sectors => {\n            if (mounted) {\n                miner.sectors = sectors\n                setMiner({...miner})\n                /* window.localStorage.setItem('miner', JSON.stringify(miner)) */\n            }\n        })\n\n        return () => { mounted = false }\n    }, [head, minerId])\n\n    useEffect(() => {\n        console.log('spacegap', 'miner has changed', miner)\n    }, [miner])\n\n    useEffect(() => {\n        if (canvasRef.current) {\n            Blockies.render({seed: miner.id}, canvasRef.current)\n\n            const renderCtx = canvasRef.current.getContext('2d');\n\n            if (renderCtx) {\n                setContext(renderCtx);\n            }\n        }\n    }, [context, miner]);\n\n    if (!miner) {\n        return <></>\n    }\n\n    return (\n        <div>\n            <div id=\"miner\" className=\"section\">\n                {/* <span><canvas ref={canvasRef}></canvas></span> */}\n                <h1>\n                    {miner.id}\n                </h1>\n                <div>\n                    {miners && miners[miner.id].tag && <span className=\"miner-name\">{miners[miner.id].tag.en}</span>}\n                    {miners && miners[miner.id].location && <span> from {miners[miner.id].location.flagEmoji}</span>}\n                    &nbsp;\n                    (\n                    <a target='_blank' href={`https://filfox.info/en/address/${miner.id}`}>filfox</a>,&nbsp;\n                        <a href={`https://filscan.io/#/tipset/address-detail?address=${miner.identicon}`}>filscan</a>,&nbsp;\n                        <a href={`https://filscout.io/en/pc/account?id=${miner.id}`}>filscout</a>\n                    )\n        </div>\n        </div>\n\n        <div id=\"deposits\" className=\"section\">\n        <div className='grid'>\n        {\n            miner.deposits &&\n            <Summary\n                title={f(miner.deposits.collateral || 0)}\n                desc=\"Collateral\" />\n        }\n\n        {\n            miner.deposits &&\n            <Summary\n                title={f(miner.deposits.available || 0)}\n                desc=\"Available\" />\n        }\n\n        {\n            miner.deposits &&\n            <Summary\n                title={f(miner.deposits.locked || 0)}\n                desc=\"Locked\" />\n        }\n        </div>\n        </div>\n\n        <div id=\"sectors\">\n        <div className='grid'>\n        {\n            miner.deadlines &&\n            <Summary\n            title={f(miner.deadlines.SectorsCount || 0)}\n            desc=\"Live Sectors\" />\n        }\n        {\n            miner.deadlines &&\n            <Summary\n            title={f(miner.deadlines.SectorsCount || 0)}\n            desc=\"Live Sectors\" />\n        }\n        {\n            miner.preCommits &&\n            <Summary\n            title={f(miner.preCommits.Count || 0)}\n            desc=\"PreCommits\" />\n        }\n        {\n            miner.deadlines &&\n            <Summary\n            title={f(miner.deadlines.ActiveCount || 0)}\n            desc=\"Active Sectors\" />\n        }\n        {\n            miner.deadlines &&\n            <Summary\n            title={f(miner.deadlines.FaultsCount || 0)}\n            desc=\"PoSt Faults\" />\n        }\n        </div>\n        </div>\n\n        <div id=\"wpost\" className=\"section\">\n        <div className='row'>\n        <div className='col'>\n        <h3>WindowPoSt due</h3>\n        </div>\n        </div>\n        <div className=\"deadlines windowpost\">\n        {\n            miner.deadlines && miner.deadlines.nextDeadlines.map(d =>\n                <div className={d.TotalSectors === 0 ? 'deadline opacity5' : 'deadline'}>\n\n                    <div className=\"out\">\n                        In {d.Close - head.Height}\n                        {/* <span className=\"epochs\">epochs</span> */}\n                    </div>\n                    <div className=\"hddWrapper\">\n                        <div className='in'>\n                            {Math.round(d.TotalSectors * 32 /1024)} TiB\n\n                        </div>\n                        <div className=\"hdds\">\n                            {\n                                [...Array(\n                                    Math.ceil(\n                                        Math.round(d.TotalSectors * 32 /1024 - +d.FaultyPower.Raw / (1024*1024*1024*1024))/8\n                                    ))].map(v => <div className='hdd'></div>)\n                            }\n                            {\n                                [...Array(Math.ceil(Math.round(+d.FaultyPower.Raw/(1024*1024*1024*1024))/8))].map(v =>\n                                    <div className='hdd faulty'></div>\n                                )\n                            }\n\n                        </div>\n                    </div>\n                    {/* <div className=\"partitions\">\n                        {\n                        [...Array(Math.ceil(d.TotalSectors/2349))].map(v =>\n                        <div className='partition'></div>\n                        )\n                        }\n                        </div> */}\n                </div>\n            )\n        }\n\n        </div>\n        </div>\n        <div id=\"provecommit\" className=\"section\">\n        <div className='row'>\n        <div className='col'>\n        <h3>ProveCommits due</h3>\n        </div>\n        </div>\n        <div className=\"deadlines provecommit\">\n        {\n            miner.preCommits && miner.preCommits.PreCommitDeadlines.map(d =>\n                <div className='deadline'>\n                    <div className=\"out\">\n                        In {d.Expiry - head.Height}\n                        {/* <span className=\"epochs\">epochs</span> */}\n                    </div>\n                    <div className=\"hddWrapper\">\n                        <div className='in'>\n                            {Math.round(d.Sectors.length )} sectors\n                        </div>\n                        <div className=\"hdds\">\n                            {\n                                d.Sectors.map(v =>\n                                    <div id={v} className={`hdd ${!!miner.sectors && !!miner.sectors.Sectors[v]}`}>{v == 215428 ? miner.sectors && miner.sectors.Sectors[v]  : ''}</div>\n                                )\n                            }\n                        </div>\n                    </div>\n                    {/* <div className=\"partitions\">\n                        {\n                        [...Array(Math.ceil(d.TotalSectors/2349))].map(v =>\n                        <div className='partition'></div>\n                        )\n                        }\n                        </div> */}\n                </div>\n            )\n        }\n\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}