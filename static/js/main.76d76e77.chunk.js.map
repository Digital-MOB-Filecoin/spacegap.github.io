{"version":3,"sources":["services/filecoin/index.js","services/drand/index.js","App.js","serviceWorker.js","index.js"],"names":["d3","require","f","format","b64","bx","schema","testnet","fullNode","preCommitSchema","type","key","value","info","seal_proof","sector_number","sealed_cid","seal_rand_epoch","deal_ids","expiration","replace_capacity","replace_sector_deadline","replace_sector_partition","replace_sector_number","precommit_deposit","precommit_epoch","deal_weight","verified_deal_weight","bytesToBig","p","acc","i","length","window","BigInt","Filecoin","endpointUrl","this","url","provider","BrowserProvider","console","log","client","LotusRPC","head","path","state","Blocks","ParentStateRoot","chainGetNode","data","Obj","self","Fil","methods","decode","asObject","a","res","chainHead","height","ChainGetTipSetByHeight","storagePowerActorRaw","hash","StateReadState","Cids","precommitdeposits","State","PreCommitDeposits","locked","LockedFunds","collateral","Balance","available","cached","localStorage","getItem","JSON","parse","fetch","json","miners","reduce","curr","address","setItem","stringify","Promise","all","StateMinerProvingDeadline","StateMinerDeadlines","deadline","deadlines","nextDeadlines","Array","map","_","Index","Close","LiveSectors","TotalSectors","FaultyPower","SectorsCount","d","FaultsCount","Raw","ActiveCount","getData","preCommittedSectors","PreCommitDeadlines","groups","Object","keys","SectorNumber","Expiry","Sectors","sort","b","Count","StateMinerSectors","sectorList","ID","number","sectorsCount","f2","getFilecoinExpectedHeight","filGenesis","Date","getTime","Math","floor","now","Status","spa","useState","minersDeadlines","setMinersDeadlines","minersDeadlines2880","setMinersDeadlines2880","prev60","setPrev60","prev120","setPrev120","useEffect","getPrev","diff","fetchTipsetHead","Height","prevHead","fetchPower","prevSpa","fetchingPrevious","mounted","minersList","slice","asyncPool","minerId","fetchDeadlines","deadlines2880","className","id","title","parseInt","TotalQualityAdjPower","desc","to","Full","setHead","fetchHead","fetched","fetchingHead","Home","Summary","href","WindowPoStStatus","round","ceil","v","WindowPoSt","TinySummary","expected","current","Miner","useParams","miner","setMiner","canvasRef","React","useRef","context","setContext","then","catch","err","error","fetchDeposits","deposits","fetchPreCommittedSectors","preCommits","fetchSectors","sectors","Blockies","render","seed","renderCtx","getContext","tag","en","location","flagEmoji","target","identicon","data-tip","data-for","effect","place","App","setMiners","setRound","node","setNode","setFilClient","filExpectedHeight","setFilExpectedHeight","setSpa","reload","power","getMiners","Drand","interval","setInterval","clearInterval","name","onChange","e","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.76d76e77.chunk.js","sourcesContent":["import { LotusRPC } from '@filecoin-shipyard/lotus-client-rpc'\nimport { BrowserProvider } from '@filecoin-shipyard/lotus-client-provider-browser'\nimport Fil from 'js-hamt-filecoin'\nconst d3 = require('d3')\nconst f = d3.format('0.2f')\nconst bx = require('base-x')\nconst BASE64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"\nconst b64 = bx(BASE64)\n\n\nconst schema = require('@filecoin-shipyard/lotus-client-schema').testnet.fullNode\n\nconst preCommitSchema = ({\n  type: 'hamt',\n  key: 'bigint',\n  value: {\n    info: {\n      seal_proof: 'int',\n      sector_number: 'int',\n      sealed_cid: 'cid',\n      seal_rand_epoch: 'int',\n      deal_ids: ['list', 'int'],\n      expiration: 'int',\n      replace_capacity: 'bool',\n      replace_sector_deadline: 'int',\n      replace_sector_partition: 'int',\n      replace_sector_number: 'int',\n    },\n    precommit_deposit: 'bigint',\n    precommit_epoch: 'int',\n    deal_weight: 'bigint',\n    verified_deal_weight: 'bigint',\n  },\n})\n\nfunction bytesToBig(p) {\n  let acc = 0n\n  for (let i = 0; i < p.length; i++) {\n    acc *= 256n\n    acc += window.BigInt(p[i])\n  }\n  return acc\n}\n\nexport default class Filecoin {\n  constructor(endpointUrl) {\n    this.url = endpointUrl\n    const provider = new BrowserProvider(endpointUrl)\n    console.log('new endpoint', endpointUrl)\n    this.client = new LotusRPC(provider, { schema })\n  }\n  close () {\n\n  }\n\n  async getData (head, path, schema) {\n    const state = head.Blocks[0].ParentStateRoot['/']\n    const data = (await this.client.chainGetNode(`${state}/${path}`)).Obj\n\n    const self = this;\n    return await Fil.methods.decode(schema, data).asObject(async (a) => {\n      const res = await self.client.chainGetNode(a)\n      return res.Obj\n    })\n  }\n\n  async fetchHead () {\n    return await this.client.chainHead()\n  }\n\n  async fetchTipsetHead(height) {\n    return await this.client.ChainGetTipSetByHeight(height, null)\n  }\n\n  async fetchPower (head) {\n    const state = head.Blocks[0].ParentStateRoot['/']\n    const storagePowerActorRaw = (await this.client.chainGetNode(`${state}/@Ha:t04/1`)).Obj\n    return {\n      'TotalRawBytePower': bytesToBig(b64.decode(storagePowerActorRaw[0])),\n      'TotalBytesCommitted': bytesToBig(b64.decode(storagePowerActorRaw[1])),\n      'TotalQualityAdjPower': bytesToBig(b64.decode(storagePowerActorRaw[2])),\n      'TotalQABytesCommitted': bytesToBig(b64.decode(storagePowerActorRaw[3])),\n      'TotalPledgeCollateral': bytesToBig(b64.decode(storagePowerActorRaw[4])),\n      'ThisEpochRawBytePower': bytesToBig(b64.decode(storagePowerActorRaw[5])),\n      'ThisEpochQualityAdjPower': bytesToBig(b64.decode(storagePowerActorRaw[6])),\n      'ThisEpochPledgeCollateral': bytesToBig(b64.decode(storagePowerActorRaw[7])),\n    }\n  }\n\n  async fetchDeposits (hash, head) {\n    const state = await this.client.StateReadState(hash, head.Cids)\n    const precommitdeposits = state.State.PreCommitDeposits\n    const locked = state.State.LockedFunds\n    const collateral = state.Balance\n    const available = collateral - precommitdeposits - locked\n\n    return {\n      collateral: f(state.Balance / 1000000000000000000),\n      available: f(available / 1000000000000000000),\n      locked: f(locked / 1000000000000000000),\n      precommitdeposits: f(precommitdeposits / 1000000000000000000),\n    }\n  }\n\n  async getMiners () {\n    const cached = window.localStorage.getItem('miners')\n    if (cached) return JSON.parse(cached)\n\n    const json = await (await fetch('https://filfox.info/api/v0/miner/list/power?pageSize=1000&page=0')).json()\n    const miners = json.miners.reduce((acc, curr) => {\n      acc[curr.address] = curr;\n      return acc\n    }, {})\n\n    window.localStorage.setItem('miners', JSON.stringify(miners))\n\n    return miners\n  }\n\n   async fetchDeadlines (hash, head) {\n    const [deadline, deadlines] = await Promise.all([\n      this.client.StateMinerProvingDeadline(hash, head.Cids),\n      this.client.StateMinerDeadlines(hash, head.Cids)\n    ])\n\n\n    const nextDeadlines = [...Array(48)]\n          .map((_, i) => ({\n            ...deadlines[(deadline.Index + i) % 48],\n            Close: deadline.Close + i * 60}))\n          .map(({Close, LiveSectors, TotalSectors, FaultyPower}) => ({Close, LiveSectors, TotalSectors, FaultyPower}))\n\n    const SectorsCount = deadlines\n          .map(d => +d.LiveSectors)\n          .reduce((acc, curr) => acc + curr, 0)\n\n    const FaultsCount = deadlines\n          .map(d => +d.FaultyPower.Raw)\n          .reduce((acc, curr) => acc + curr, 0) / (32*1024*1024*1024)\n\n    return {\n      nextDeadlines,\n      SectorsCount,\n      FaultsCount,\n      ActiveCount: SectorsCount - FaultsCount\n    }\n  }\n\n  async fetchPreCommittedSectors (hash, head) {\n    const preCommittedSectors = await this.getData(head, `@Ha:${hash}/1/5`, preCommitSchema)\n    const PreCommitDeadlines = d3.groups(\n      Object.keys(preCommittedSectors)\n        .map(d => ({\n          SectorNumber: preCommittedSectors[d].info.sector_number,\n          Expiry: preCommittedSectors[d].precommit_epoch + (10000 + 60 + 150)\n        })),\n      d => d.Expiry)\n          .map(([Expiry, Sectors]) => ({\n            Expiry,\n            Sectors: Sectors.map(d => d.SectorNumber)\n          }))\n          .sort((a, b) => a.Expiry - b.Expiry)\n\n    return {PreCommitDeadlines, Count:  Object.keys(preCommittedSectors).length}\n  }\n\n  async fetchSectors (hash, head) {\n    const sectorList = await this.client.StateMinerSectors(hash, null, null, head.Cids)\n    const Sectors = sectorList.reduce((acc, curr) => {\n      acc[curr.ID] = { number: curr.ID, info: curr }\n      return acc\n    }, {})\n\n    const sectorsCount = Object.keys(Sectors).length\n    return { sectorsCount, Sectors }\n  }\n}\n\n","export default async function () {\n  return await (await fetch('https://pl-us.incentinet.drand.sh/health')).json()\n}\n","import React, { useState, useEffect, useRef } from 'react'\nimport ReactTooltip from 'react-tooltip';\nimport {\n    HashRouter as Router,\n    Switch,\n    Route,\n    Link,\n    useParams\n} from \"react-router-dom\";\nimport Filecoin from './services/filecoin'\nimport Drand from './services/drand'\nimport Blockies from 'blockies-identicon'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.scss'\nimport asyncPool from \"tiny-async-pool\";\nconst d3 = require('d3')\nconst f = d3.format(',')\nconst f2 = d3.format(',.2f')\n\nfunction usePrevious(value) {\n    const ref = useRef();\n    useEffect(() => {\n        ref.current = value;\n    });\n    return ref.current;\n}\n\nfunction getFilecoinExpectedHeight () {\n    const filGenesis = (new Date(\"2020-08-24 22:00:00Z\")).getTime()\n    return Math.floor((Date.now() - filGenesis)/1000/30)\n}\n\nfunction App () {\n    const [miners, setMiners] = useState()\n    const [head, setHead] = useState()\n    const [round, setRound] = useState()\n    const [node, setNode] = useState('wss://lotus.jimpick.com/spacerace_api/0/node/rpc/v0')\n    const [client, setFilClient] = useState(new Filecoin(node))\n    const [filExpectedHeight, setFilExpectedHeight] = useState(getFilecoinExpectedHeight())\n    const [spa, setSpa] = useState()\n\n    useEffect(() => {\n        const reload = async () => {\n            await setHead()\n            await setFilClient(new Filecoin(node))\n        }\n\n        reload()\n    }, [node])\n\n    useEffect(() => {\n        if (!head) return \n\n        client.fetchPower(head).then(power => {\n            setSpa(power)\n        })\n    }, [head])\n\n    useEffect(() => {\n        let mounted = true\n\n        client.getMiners().then(res => {\n            if (!mounted) return\n            setMiners(res)\n        })\n\n        const fetchingHead = async () => {\n            client.fetchHead().then(fetched => {\n                if (!mounted) return\n                if (head && fetched.Height === head.Height) {\n                    console.log('repeated block, skip')\n                    return\n                }\n                console.log('new block', fetched.Height, head && head.Height)\n                setHead(fetched)\n            })\n\n            Drand().then(fetched => {\n                if (!mounted) return\n                if (round && fetched.current === round.current) {\n                    console.log('repeated drand, skip')\n                    return\n                }\n                console.log('new drand', fetched)\n                setRound(fetched)\n            })\n\n            setFilExpectedHeight(getFilecoinExpectedHeight())\n        }\n\n        fetchingHead()\n\n        const interval = setInterval(() => {\n            fetchingHead()\n        }, 5000)\n\n        return () => {\n            mounted = false\n            clearInterval(interval)\n        }\n    }, [client, head, round])\n\n    return (\n        <Router>\n            <div className='App'>\n                <div className='container'>\n                    <div className='row'>\n                        <div className='col'>\n                            <select id=\"\" name=\"\" onChange={e => setNode(e.target.value)} value={node}>\n                                <option value='wss://lotus.jimpick.com/spacerace_api/0/node/rpc/v0'>Jim's node 0</option>\n                                <option value='wss://lotus.jimpick.com/spacerace_api/1/node/rpc/v0'>Jim's node 1</option>\n                                <option value='ws://www.border.ninja:12342/node/rpc/v0'>Border's node</option>\n                                <option value='wss://node.glif.io/space07/lotus/rpc/v0'>Glif's node</option>\n                            </select>\n                        </div>\n                    </div>\n                    <TinySummary head={head} expected={filExpectedHeight} round={round} />\n                </div>\n                <header className='container-fluid'>\n                    <Link to=\"/\">\n                        <h1 id=\"logo\" className='logo'><span>spacegap</span></h1>\n                    </Link>\n                </header>\n                <Switch>\n                    <Route path='/miners/:minerId'>\n                        <section className='container'>\n                            <Miner client={client} miners={miners} head={head} />\n                        </section>\n                    </Route>\n                    <Route path='/full'>\n                        <Full client={client} miners={miners} />\n                    </Route>\n                    <Route path='/status'>\n                        <Status head={head} spa={spa} client={client} miners={miners} />\n                    </Route>\n                    <Route path='/'>\n                        <Home miners={miners} />\n                    </Route>\n\n                </Switch>\n            </div>\n        </Router>\n    )\n}\n\nconst bytesToPiB = (1024*1024*1024*1024*1024)\n\nfunction Status ({client, spa, head, miners}) {\n    const [minersDeadlines, setMinersDeadlines] = useState({})\n    const [minersDeadlines2880, setMinersDeadlines2880] = useState({})\n    const [prev60, setPrev60] = useState()\n    const [prev120, setPrev120] = useState()\n\n    useEffect(() => {\n        if (!head) return\n\n        const fetchingPrevious = async () => {\n            const getPrev = async (diff) => {\n                const prevHead = await client.fetchTipsetHead(head.Height - diff)\n                const prevSpa = await client.fetchPower(prevHead)\n                return prevSpa\n            }\n\n            const [prev60, prev120] = await Promise.all([\n                getPrev(60),\n                getPrev(120)\n            ])\n\n            await setPrev60(prev60)\n            await setPrev120(prev120)\n        }\n        fetchingPrevious()\n    }, [head])\n\n    useEffect(() => {\n        let mounted = true\n        if (!head) return\n\n        const minersList = Object.keys(miners).slice(0, 20).map(d => miners[d].address)\n        asyncPool(5, minersList, async minerId => {\n            if (!mounted) return;\n            const deadlines = await client.fetchDeadlines(minerId, head)\n            if (!mounted) return;\n            const prevHead = await client.fetchTipsetHead(head.Height - 2880)\n            if (!mounted) return;\n            const deadlines2880 = await client.fetchDeadlines(minerId, prevHead)\n            if (!mounted) return;\n            minersDeadlines[minerId] = deadlines\n            minersDeadlines2880[minerId] = deadlines2880\n            await setMinersDeadlines({...minersDeadlines})\n            return await setMinersDeadlines2880({...minersDeadlines2880})\n        })\n\n        return () => { mounted = false }\n    }, [client, head, miners])\n\n    return (\n        <section className='container'>\n            <div id=\"deposits\" className=\"section\">\n        <div className='grid'>\n        {\n            spa &&\n            <>\n                <Summary\n                    title={f2(parseInt(spa.TotalQualityAdjPower)/bytesToPiB)}\n                    desc=\"Total QA Power\" />\n            </>\n        }\n        {\n            prev60 && spa &&\n            <>\n                <Summary\n                    title={f2(parseInt(spa.TotalQualityAdjPower - prev60.TotalQualityAdjPower)/bytesToPiB)}\n                    desc=\"60 Epochs delta\" />\n            </>\n        }\n        {\n            prev120 && spa &&\n            <>\n                <Summary\n                    title={f2(parseInt(spa.TotalQualityAdjPower - prev120.TotalQualityAdjPower)/bytesToPiB)}\n                    desc=\"120 Epochs delta\" />\n            </>\n        }\n\n                </div>\n            </div>\n\n            Listing WindowPoSt duties of the top 50 miners.\n            {miners && Object.keys(miners).slice(0, 20).map(d =>\n                <div className=\"flex\">\n                    <Link to={`/miners/${miners[d].address}`}>{miners[d].address}</Link>\n                    {\n                        minersDeadlines && minersDeadlines[miners[d].address] &&\n                        <WindowPoStStatus head={head} deadline={minersDeadlines[miners[d].address].nextDeadlines[47]} />\n                    }\n                    {\n                        minersDeadlines2880 && minersDeadlines2880[miners[d].address] &&\n                        <WindowPoStStatus head={head} deadline={minersDeadlines2880[miners[d].address].nextDeadlines[47]} />\n                    }\n\n                </div>\n            )}\n        </section>\n    )\n}\n\nfunction Full ({miners, client}) {\n    const [minersDeadlines, setMinersDeadlines] = useState({})\n    const [head, setHead] = useState()\n\n    useEffect(() => {\n        const fetchingHead = async () => {\n            const fetched = await client.fetchHead()\n            setHead(fetched)\n        }\n        fetchingHead()\n    }, [client])\n\n\n    useEffect(() => {\n        let mounted = true\n        if (!head) return\n\n        const minersList = Object.keys(miners).slice(0, 50).map(d => miners[d].address)\n        asyncPool(5, minersList, async minerId => {\n            if (!mounted) return;\n            const deadlines = await client.fetchDeadlines(minerId, head)\n            if (!mounted) return;\n            minersDeadlines[minerId] = deadlines\n            return await setMinersDeadlines({...minersDeadlines})\n        })\n\n        return () => { mounted = false }\n    }, [client, head, miners])\n\n    return (\n        <section id='LookUp' className='container'>\n            Listing WindowPoSt duties of the top 50 miners.\n            {miners && Object.keys(miners).slice(0, 50).map(d =>\n                <div>\n                    <Link to={`/miners/${miners[d].address}`}>{miners[d].address}</Link>\n\n                    <WindowPoSt deadlines={minersDeadlines[miners[d].address]} head={head} />\n\n                </div>\n            )}\n        </section>\n    )\n}\n\n\nfunction Home ({miners}) {\n    return (\n        <section id='home' className='container'>\n            <div className=\"spacerace\">\n                Top miners:\n                {miners && Object.keys(miners).slice(0, 5).map((d, i) =>\n                    <div>\n                        {i+1}. <Link to={`/miners/${miners[d].address}`}>{miners[d].address}</Link>\n                    </div>\n                )}\n            </div>\n            <div>\n                See deadlines of <Link to={`/full`}>top 50 miners</Link> or click on individual miners or the <Link to='/status'>network status</Link>.\n            </div>\n        </section>\n    )\n}\n\nconst PoSt = ({ epoch, posted, skipped }) => {\n    return (\n        <div>\n            Epoch {epoch}: {posted ? 'posted' : 'missed'}\n        </div>\n    )\n}\n\nconst Summary = ({title, url, desc}) => {\n    return (\n        <div className=\"summary col-sm\">\n        <div className=\"summary-title\">\n        {\n            url ? <a href={url}>{title}</a> : <>{title}</>\n        }\n            </div>\n            <div className=\"summary-desc\">\n                {desc}\n            </div>\n            </div>\n    )\n}\n\nconst WindowPoStStatus = ({deadline, head}) => {\n    const d = deadline\n\n    return (\n        <div className=\"deadlines windowpost\">\n            <div className={d.TotalSectors === 0 ? 'deadline opacity5' : 'deadline'}>\n\n                <div className=\"out\">\n                    In {d.Close - head.Height}\n                    {/* <span className=\"epochs\">epochs</span> */}\n                </div>\n                <div className=\"hddWrapper\">\n                    <div className='in'>\n                        {Math.round(d.TotalSectors * 32 /1024)} TiB\n\n                    </div>\n                    <div className=\"hdds\">\n                        {\n                            [...Array(\n                                Math.ceil(\n                                    Math.round(d.TotalSectors * 32 /1024 - +d.FaultyPower.Raw / (1024*1024*1024*1024))/8\n                                ))].map((v, i) => <div key={i} className='hdd'></div>)\n                        }\n                        {\n                            [...Array(Math.ceil(Math.round(+d.FaultyPower.Raw/(1024*1024*1024*1024))/8))].map((v, i) =>\n                                <div key={i} className='hdd faulty'></div>\n                            )\n                        }\n\n                    </div>\n                </div>\n            </div>\n\n        </div>\n    )\n}\n\n\nconst WindowPoSt = ({deadlines, head}) => {\n    return (\n        <div className=\"deadlines windowpost\">\n            {\n                deadlines && deadlines.nextDeadlines.map((d, i) =>\n                    <div key={i} className={d.TotalSectors === 0 ? 'deadline opacity5' : 'deadline'}>\n\n                        <div className=\"out\">\n                            In {d.Close - head.Height}\n                            {/* <span className=\"epochs\">epochs</span> */}\n                        </div>\n                        <div className=\"hddWrapper\">\n                            <div className='in'>\n                                {Math.round(d.TotalSectors * 32 /1024)} TiB\n\n                            </div>\n                            <div className=\"hdds\">\n                                {\n                                    [...Array(\n                                        Math.ceil(\n                                            Math.round(d.TotalSectors * 32 /1024 - +d.FaultyPower.Raw / (1024*1024*1024*1024))/8\n                                        ))].map((v, i) => <div key={i} className='hdd'></div>)\n                                }\n                                {\n                                    [...Array(Math.ceil(Math.round(+d.FaultyPower.Raw/(1024*1024*1024*1024))/8))].map((v, i) =>\n                                        <div key={i} className='hdd faulty'></div>\n                                    )\n                                }\n\n                            </div>\n                        </div>\n                        {/* <div className=\"partitions\">\n                            {\n                            [...Array(Math.ceil(d.TotalSectors/2349))].map(v =>\n                            <div className='partition'></div>\n                            )\n                            }\n                            </div> */}\n                    </div>\n                )\n            }\n\n        </div>\n    )\n}\n\nfunction TinySummary ({head, expected, round}) {\n    return (\n        <div className='tiny-grid'>\n        {\n            head && expected &&\n            <div>Filecoin Status <span>{head.Height < expected ? expected - head.Height === 1 ? 'gathering blocks' : 'catching up' : 'ok'}</span></div>\n\n        }\n        {\n            head &&\n            <div className='tiny'>\n                Current Tipset <a href={`https://filfox.info/en/tipset/${head.Height}`}>{f(head.Height)}</a></div>\n        }\n        {\n            expected &&\n            <div>Expected Tipset <a href={`https://filfox.info/en/tipset/${expected}`}>{f(expected)}</a></div>\n        }\n        {\n            round &&\n            <>\n                <div>Drand Status <span>{round.current < round.expected ? 'catching up' : 'ok'}</span></div>\n                <div>Current Drand <a href={`https://api.drand.sh/public/${round.current}`}>{f(round.current)}</a></div>\n                <div>Expected Drand <a href={`https://api.drand.sh/public/${round.expected}`}>{f(round.expected)}</a></div>\n            </>\n        }\n            </div>\n    )\n}\n\nconst Miner = ({ client, miners, head }) => {\n    let { minerId } = useParams();\n    const [miner, setMiner] = useState({id: minerId})\n\n    const canvasRef = React.useRef(null)\n    const [context, setContext] = React.useState(null)\n\n    // On new (hash or head): fetch miner\n    useEffect(() => {\n        if (!minerId || !head) return;\n\n        let mounted = true\n\n        const fetchInfo = () => {\n            console.log('url', client.url.slice(20), head.Cids, head.Height)\n            setMiner({...miner})\n\n            client.fetchDeadlines(minerId, head).then(deadlines => {\n                if (mounted) {\n                    miner.deadlines = deadlines\n                    setMiner({...miner})\n                }\n            })\n                   .catch(err => {\n                       console.error(err)\n                   })\n\n            client.fetchDeposits(minerId, head).then(deposits => {\n                if (mounted) {\n                    miner.deposits = deposits\n                    setMiner({...miner})\n                }\n            })\n\n            client.fetchPreCommittedSectors(minerId, head).then(preCommits => {\n                if (mounted) {\n                    miner.preCommits = preCommits\n                    setMiner({...miner})\n                }\n            })\n\n            client.fetchSectors(minerId, head).then(sectors => {\n                if (mounted) {\n                    miner.sectors = sectors\n                    setMiner({...miner})\n                }\n            })\n        }\n\n        fetchInfo()\n\n        return () => { mounted = false }\n    }, [client, head, minerId])\n\n    useEffect(() => {\n        if (canvasRef.current) {\n            Blockies.render({seed: miner.id}, canvasRef.current)\n\n            const renderCtx = canvasRef.current.getContext('2d');\n\n            if (renderCtx) {\n                setContext(renderCtx);\n            }\n        }\n    }, [context, miner]);\n\n    if (!miner || !head) {\n        return <></>\n    }\n\n    return (\n        <div>\n            <div id=\"miner\" className=\"section\">\n                {/* <span><canvas ref={canvasRef}></canvas></span> */}\n                <h1>\n                    {miner.id}\n                </h1>\n                <div>\n                    {miners && miners[miner.id].tag && <span className=\"miner-name\">{miners[miner.id].tag.en}</span>}\n                    {miners && miners[miner.id].location && <span> from {miners[miner.id].location.flagEmoji}</span>}\n                    &nbsp;\n                    (\n                    <a target='_blank' href={`https://filfox.info/en/address/${miner.id}`}>filfox</a>,&nbsp;\n                        <a href={`https://filscan.io/#/tipset/address-detail?address=${miner.identicon}`}>filscan</a>,&nbsp;\n                        <a href={`https://filscout.io/en/pc/account?id=${miner.id}`}>filscout</a>\n                    )\n                </div>\n            </div>\n\n            <div id=\"deposits\" className=\"section\">\n                <div className='grid'>\n                    {\n                        miner.deposits &&\n                        <Summary\n                            title={f(miner.deposits.collateral || 0)}\n                            desc=\"Collateral\" />\n                    }\n\n                    {\n                        miner.deposits &&\n                        <Summary\n                            title={f(miner.deposits.available || 0)}\n                            desc=\"Available\" />\n                    }\n\n                    {\n                        miner.deposits &&\n                        <Summary\n                            title={f(miner.deposits.locked || 0)}\n                            desc=\"Locked\" />\n                    }\n                </div>\n            </div>\n\n            <div id=\"sectors\">\n                <div className='grid'>\n                    {\n                        miner.deadlines &&\n                        <Summary\n                            title={f(miner.deadlines.SectorsCount || 0)}\n                            desc=\"Live Sectors\" />\n                    }\n                    {\n                        miner.deadlines &&\n                        <Summary\n                            title={f(miner.deadlines.ActiveCount || 0)}\n                            desc=\"Active Sectors\" />\n                    }\n                    {\n                        miner.deadlines &&\n                        <Summary\n                            title={f(miner.deadlines.FaultsCount || 0)}\n                            desc=\"Faulty Sectors\" />\n                    }\n                    {\n                        miner.preCommits &&\n                        <Summary\n                            title={f(miner.preCommits.Count || 0)}\n                            desc=\"PreCommits\" />\n                    }\n                </div>\n            </div>\n\n            <div className=\"section wpost\">\n                <div className='row'>\n                    <div className='col section-title'>\n                        <h3>WindowPoSt due</h3>\n                        <a data-tip data-for='wpost-desc'>(what is this?)</a>\n                        <ReactTooltip id='wpost-desc' effect='solid' place='top'>\n                            <span>List of 48 WindoPoSt submission deadlines ordered by due time (in epochs).<br/>Bars represent ~8TB disks to be proven, white are healthy disks, red are faulty.</span>\n                        </ReactTooltip>\n                    </div>\n                </div>\n                <WindowPoSt deadlines={miner.deadlines} head={head} />\n            </div>\n            <div id=\"provecommit\" className=\"section\">\n                <div className='row'>\n                    <div className='col section-title'>\n                        <h3>ProveCommits due</h3>\n                        <a data-tip data-for='provecommit-desc'>(what is this?)</a>\n                        <ReactTooltip id='provecommit-desc' effect='solid' place='top'>\n                            <span>List of ProveCommits ordered by due time (in epochs).<br/>Circles represent sectors to be proven.</span>\n                        </ReactTooltip>\n                    </div>\n                </div>\n                <div className=\"deadlines provecommit\">\n                    {\n                    miner.preCommits && miner.preCommits.PreCommitDeadlines.map((d, i) =>\n                    <div key={i} className='deadline'>\n                        <div className=\"out\">\n                            In {d.Expiry - head.Height}\n                            {/* <span className=\"epochs\">epochs</span> */}\n                        </div>\n                        <div className=\"hddWrapper\">\n                            <div className='in'>\n                                {Math.round(d.Sectors.length )} sectors\n                            </div>\n                            <div className=\"hdds\">\n                                {\n                                d.Sectors.map(v =>\n                                <div key={v} className={`hdd ${!!miner.sectors && !!miner.sectors.Sectors[v]}`}>{v === 215428 ? miner.sectors && miner.sectors.Sectors[v]  : ''}</div>\n                                )\n                                }\n                            </div>\n                        </div>\n                    </div>\n                    )\n                    }\n\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}