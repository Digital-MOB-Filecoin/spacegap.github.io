{"version":3,"sources":["services/filecoin/index.js","App.js","serviceWorker.js","index.js"],"names":["d3","require","f","format","schema","testnet","fullNode","provider","BrowserProvider","client","LotusRPC","preCommitSchema","type","key","value","info","seal_proof","sector_number","sealed_cid","seal_rand_epoch","deal_ids","expiration","replace_capacity","replace_sector_deadline","replace_sector_partition","replace_sector_number","precommit_deposit","precommit_epoch","deal_weight","verified_deal_weight","load","a","chainGetNode","res","Obj","getData","head","path","state","Blocks","ParentStateRoot","data","Fil","methods","decode","asObject","fetchHead","chainHead","fetchDeposits","hash","StateReadState","Cids","precommitdeposits","State","PreCommitDeposits","locked","LockedFunds","collateral","Balance","available","getMiners","cached","window","localStorage","getItem","JSON","parse","fetch","json","miners","reduce","acc","curr","address","setItem","stringify","fetchDeadlines","Promise","all","StateMinerProvingDeadline","StateMinerDeadlines","deadline","deadlines","nextDeadlines","Array","map","_","i","Index","Close","LiveSectors","TotalSectors","FaultyPower","SectorsCount","d","FaultsCount","Raw","ActiveCount","fetchPreCommittedSectors","preCommittedSectors","PreCommitDeadlines","groups","Object","keys","SectorNumber","Expiry","Sectors","sort","b","Count","length","fetchSectors","StateMinerSectors","sectorList","ID","number","sectorsCount","Full","useState","setMiners","minersDeadlines","setMinersDeadlines","setHead","useEffect","then","fetched","fetchingHead","mounted","minersList","slice","asyncPool","minerId","console","log","id","className","to","Home","class","Summary","condition","title","desc","WindowPoSt","Height","Math","round","ceil","v","Miner","useParams","interval","setInterval","clearInterval","canvasRef","React","useRef","context","setContext","miner","setMiner","deposits","preCommits","sectors","current","Blockies","render","seed","renderCtx","getContext","tag","en","location","flagEmoji","target","href","identicon","data-tip","data-for","effect","place","App","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ed21b142.chunk.js","sourcesContent":["import { LotusRPC } from '@filecoin-shipyard/lotus-client-rpc'\nimport { BrowserProvider } from '@filecoin-shipyard/lotus-client-provider-browser'\nimport Fil from 'js-hamt-filecoin'\nconst d3 = require('d3')\n\nconst f = d3.format('0.2f')\n\nconst schema = require('@filecoin-shipyard/lotus-client-schema').testnet\n  .fullNode\n\nconst endpointUrl = 'wss://lotus.jimpick.com/spacerace_api/0/node/rpc/v0'\nconst provider = new BrowserProvider(endpointUrl)\nconst client = new LotusRPC(provider, { schema })\n\nconst preCommitSchema = ({\n  type: 'hamt',\n  key: 'bigint',\n  value: {\n    info: {\n      seal_proof: 'int',\n      sector_number: 'int',\n      sealed_cid: 'cid',\n      seal_rand_epoch: 'int',\n      deal_ids: ['list', 'int'],\n      expiration: 'int',\n      replace_capacity: 'bool',\n      replace_sector_deadline: 'int',\n      replace_sector_partition: 'int',\n      replace_sector_number: 'int',\n    },\n    precommit_deposit: 'bigint',\n    precommit_epoch: 'int',\n    deal_weight: 'bigint',\n    verified_deal_weight: 'bigint',\n  },\n})\n\nconst load = async function (a) {\n  const res = await client.chainGetNode(a)\n  return res.Obj\n}\n\nconst getData = async function (head, path, schema) {\n  const state = head.Blocks[0].ParentStateRoot['/']\n  const data = (await client.chainGetNode(`${state}/${path}`)).Obj\n  return await Fil.methods.decode(schema, data).asObject(load)\n}\n\n\nexport const fetchHead = async () => {\n  return await client.chainHead()\n}\n\nexport const fetchDeposits = async (hash, head) => {\n  const state = await client.StateReadState(hash, head.Cids)\n  const precommitdeposits = state.State.PreCommitDeposits\n  const locked = state.State.LockedFunds\n  const collateral = state.Balance\n  const available = collateral - precommitdeposits - locked\n\n  return {\n    collateral: f(state.Balance / 1000000000000000000),\n    available: f(available / 1000000000000000000),\n    locked: f(locked / 1000000000000000000),\n    precommitdeposits: f(precommitdeposits / 1000000000000000000),\n  }\n}\n\nexport const getMiners = async () => {\n  const cached = window.localStorage.getItem('miners')\n  if (cached) return JSON.parse(cached)\n\n  const json = await (await fetch('https://filfox.info/api/v0/miner/list/power?pageSize=1000&page=0')).json()\n  const miners = json.miners.reduce((acc, curr) => {\n    acc[curr.address] = curr;\n    return acc\n  }, {})\n\n  window.localStorage.setItem('miners', JSON.stringify(miners))\n\n  return miners\n}\n\nexport const fetchDeadlines = async (hash, head) => {\n  const [deadline, deadlines] = await Promise.all([\n          client.StateMinerProvingDeadline(hash, head.Cids),\n          client.StateMinerDeadlines(hash, head.Cids)\n  ])\n\n  const nextDeadlines = [...Array(48)]\n        .map((_, i) => ({\n          ...deadlines[(deadline.Index + i) % 48],\n          Close: deadline.Close + i * 60}))\n        // .filter(d => d.TotalSectors)\n        .map(({Close, LiveSectors, TotalSectors, FaultyPower}) => ({Close, LiveSectors, TotalSectors, FaultyPower}))\n\n  const SectorsCount = deadlines\n        .map(d => +d.LiveSectors)\n        .reduce((acc, curr) => acc + curr, 0)\n\n  const FaultsCount = deadlines\n        .map(d => +d.FaultyPower.Raw)\n        .reduce((acc, curr) => acc + curr, 0) / (32*1024*1024*1024)\n\n  return {\n    nextDeadlines,\n    SectorsCount,\n    FaultsCount,\n    ActiveCount: SectorsCount - FaultsCount\n  }\n}\n\nexport const fetchPreCommittedSectors = async (hash, head) => {\n  const preCommittedSectors = await getData(head, `@Ha:${hash}/1/5`, preCommitSchema)\n  const PreCommitDeadlines = d3.groups(\n    Object.keys(preCommittedSectors)\n      .map(d => ({\n        SectorNumber: preCommittedSectors[d].info.sector_number,\n        Expiry: preCommittedSectors[d].precommit_epoch + (10000 + 60 + 150)\n      })),\n    d => d.Expiry)\n        .map(([Expiry, Sectors]) => ({\n          Expiry,\n          Sectors: Sectors.map(d => d.SectorNumber)\n        }))\n        .sort((a, b) => a.Expiry - b.Expiry)\n\n  return {PreCommitDeadlines, Count:  Object.keys(preCommittedSectors).length}\n}\n\nexport const fetchSectors = async (hash, head) => {\n  const sectorList = await client.StateMinerSectors(hash, null, null, head.Cids)\n  const Sectors = sectorList.reduce((acc, curr) => {\n    acc[curr.ID] = { number: curr.ID, info: curr }\n    return acc\n  }, {})\n\n  // const faults = (await client.StateMinerFaults(hash, head.Cids)).reduce(\n  //   (acc, curr) => {\n  //     acc[curr] = true\n  //     return acc\n  //   },\n  //   {}\n  // )\n\n  // const recoveries = (\n  //   await client.StateMinerRecoveries(hash, head.Cids)\n  // ).reduce((acc, curr) => {\n  //   acc[curr] = true\n  //   return acc\n  // }, {})\n\n  const sectorsCount = Object.keys(Sectors).length\n\n  return { sectorsCount, Sectors }\n}\n","import React, { useState, useEffect } from 'react'\nimport ReactTooltip from 'react-tooltip';\nimport {\n    HashRouter as Router,\n    Switch,\n    Route,\n    Link,\n    useParams\n} from \"react-router-dom\";\nimport {\n    fetchHead,\n    fetchSectors,\n    fetchDeadlines,\n    fetchPreCommittedSectors,\n    fetchDeposits,\n    getMiners\n} from './services/filecoin'\nimport Blockies from 'blockies-identicon'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.scss'\nimport asyncPool from \"tiny-async-pool\";\nconst d3 = require('d3')\nconst f = d3.format(',')\n\nfunction getJSONFromHistory (name) {\n    const prev = window.localStorage.getItem(name)\n    return prev && JSON.parse(prev)\n}\n\nfunction App () {\n\n    return (\n        <Router>\n            <div className='App'>\n                <header className='container-fluid'>\n                    <Link to=\"/\">\n                        <h1 id=\"logo\" className='logo'><span>spacegap</span></h1>\n                    </Link>\n                </header>\n                <Switch>\n                    <Route path='/miners/:minerId'>\n                        <section className='container'>\n                            <Miner />\n                        </section>\n                    </Route>\n                    <Route path='/full'>\n                        <Full />\n                    </Route>\n                    <Route path='/'>\n                        <Home />\n                    </Route>\n\n                </Switch>\n            </div>\n        </Router>\n    )\n}\n\nfunction Full () {\n    const [miners, setMiners] = useState({})\n    const [minersDeadlines, setMinersDeadlines] = useState({})\n    const [head, setHead] = useState()\n\n    useEffect(() => {\n        getMiners().then(res => {\n            setMiners(res)\n        })\n    }, [])\n\n    useEffect(() => {\n        const fetchingHead = async () => {\n            const fetched = await fetchHead()\n            setHead(fetched)\n        }\n        fetchingHead()\n    }, [])\n\n\n    useEffect(() => {\n        let mounted = true\n        if (!head) return\n\n        const minersList = Object.keys(miners).slice(0, 50).map(d => miners[d].address)\n        asyncPool(5, minersList, async minerId => {\n            if (!mounted) return;\n            const deadlines = await fetchDeadlines(minerId, head)\n            if (!mounted) return;\n            minersDeadlines[minerId] = deadlines\n            return await setMinersDeadlines({...minersDeadlines})\n        })\n\n        return () => { mounted = false }\n    }, [head, miners])\n\n    useEffect(() => {\n        console.log(minersDeadlines)\n    }, [minersDeadlines])\n\n    return (\n        <section id='LookUp' className='container'>\n            Listing WindowPoSt duties of the top 50 miners.\n            {miners && Object.keys(miners).slice(0, 50).map(d =>\n                <div>\n                    <Link to={`/miners/${miners[d].address}`}>{miners[d].address}</Link>\n\n                    <WindowPoSt deadlines={minersDeadlines[miners[d].address]} head={head} />\n\n                </div>\n            )}\n        </section>\n    )\n}\n\n\nfunction Home () {\n    const [miners, setMiners] = useState()\n\n    useEffect(() => {\n        getMiners().then(res => {\n            setMiners(res)\n        })\n    }, [])\n\n    return (\n        <section id='home' className='container'>\n            <div class=\"spacerace\">\n                Top miners:\n                {miners && Object.keys(miners).slice(0, 5).map((d, i) =>\n                    <div>\n                        {i+1}. <Link to={`/miners/${miners[d].address}`}>{miners[d].address}</Link>\n                    </div>\n                )}\n            </div>\n            <div>\n                See deadlines of <Link to={`/full`}>top 50 miners</Link> or click on individual miners.\n            </div>\n        </section>\n    )\n}\n\nconst PoSt = ({ epoch, posted, skipped }) => {\n    return (\n        <div>\n            Epoch {epoch}: {posted ? 'posted' : 'missed'}\n        </div>\n    )\n}\n\nconst Summary = ({condition, title, desc}) => {\n    return (\n        <div className=\"summary col-sm\">\n            <div className=\"summary-title\">\n                {title}\n            </div>\n            <div className=\"summary-desc\">\n                {desc}\n            </div>\n        </div>\n    )\n}\n\nconst WindowPoSt = ({deadlines, head}) => {\n    return (\n        <div className=\"deadlines windowpost\">\n            {\n                deadlines && deadlines.nextDeadlines.map(d =>\n                    <div className={d.TotalSectors === 0 ? 'deadline opacity5' : 'deadline'}>\n\n                        <div className=\"out\">\n                            In {d.Close - head.Height}\n                            {/* <span className=\"epochs\">epochs</span> */}\n                        </div>\n                        <div className=\"hddWrapper\">\n                            <div className='in'>\n                                {Math.round(d.TotalSectors * 32 /1024)} TiB\n\n                            </div>\n                            <div className=\"hdds\">\n                                {\n                                    [...Array(\n                                        Math.ceil(\n                                            Math.round(d.TotalSectors * 32 /1024 - +d.FaultyPower.Raw / (1024*1024*1024*1024))/8\n                                        ))].map(v => <div className='hdd'></div>)\n                                }\n                                {\n                                    [...Array(Math.ceil(Math.round(+d.FaultyPower.Raw/(1024*1024*1024*1024))/8))].map(v =>\n                                        <div className='hdd faulty'></div>\n                                    )\n                                }\n\n                            </div>\n                        </div>\n                        {/* <div className=\"partitions\">\n                            {\n                            [...Array(Math.ceil(d.TotalSectors/2349))].map(v =>\n                            <div className='partition'></div>\n                            )\n                            }\n                            </div> */}\n                    </div>\n                )\n            }\n\n        </div>\n    )\n}\n\nconst Miner = () => {\n    let { minerId } = useParams();\n\n    const [head, setHead] = useState()\n    const [miners, setMiners] = useState()\n\n    useEffect(() => {\n        getMiners().then(res => {\n            setMiners(res)\n        })\n    }, [])\n\n    // Fetch head\n    useEffect(() => {\n        const fetchingHead = async () => {\n            const fetched = await fetchHead()\n            setHead(fetched)\n        }\n        fetchingHead()\n        const interval = setInterval(() => fetchingHead(), 30000)\n        return () => clearInterval(interval)\n    }, [])\n\n    const canvasRef = React.useRef(null)\n    const [context, setContext] = React.useState(null)\n\n    const [miner, setMiner] = useState({id: minerId})\n\n    // On new (hash or head): fetch miner\n    useEffect(() => {\n        if (!minerId || !head) return;\n\n        let mounted = true\n        setMiner({...miner})\n\n        fetchDeadlines(minerId, head).then(deadlines => {\n            if (mounted) {\n                miner.deadlines = deadlines\n                setMiner({...miner})\n                /* window.localStorage.setItem(`miner_{minerId}`, JSON.stringify(miner)) */\n            }\n        })\n\n        fetchDeposits(minerId, head).then(deposits => {\n            if (mounted) {\n                miner.deposits = deposits\n                setMiner({...miner})\n                /* window.localStorage.setItem('miner', JSON.stringify(miner)) */\n            }\n        })\n\n        fetchPreCommittedSectors(minerId, head).then(preCommits => {\n            if (mounted) {\n                miner.preCommits = preCommits\n                setMiner({...miner})\n                /* window.localStorage.setItem('miner', JSON.stringify(miner)) */\n            }\n        })\n\n        fetchSectors(minerId, head).then(sectors => {\n            if (mounted) {\n                miner.sectors = sectors\n                setMiner({...miner})\n                /* window.localStorage.setItem('miner', JSON.stringify(miner)) */\n            }\n        })\n\n        return () => { mounted = false }\n    }, [head, minerId])\n\n    useEffect(() => {\n        if (canvasRef.current) {\n            Blockies.render({seed: miner.id}, canvasRef.current)\n\n            const renderCtx = canvasRef.current.getContext('2d');\n\n            if (renderCtx) {\n                setContext(renderCtx);\n            }\n        }\n    }, [context, miner]);\n\n    if (!miner) {\n        return <></>\n    }\n\n    return (\n        <div>\n            <div id=\"miner\" className=\"section\">\n                {/* <span><canvas ref={canvasRef}></canvas></span> */}\n                <h1>\n                    {miner.id}\n                </h1>\n                <div>\n                    {miners && miners[miner.id].tag && <span className=\"miner-name\">{miners[miner.id].tag.en}</span>}\n                    {miners && miners[miner.id].location && <span> from {miners[miner.id].location.flagEmoji}</span>}\n                    &nbsp;\n                    (\n                    <a target='_blank' href={`https://filfox.info/en/address/${miner.id}`}>filfox</a>,&nbsp;\n                        <a href={`https://filscan.io/#/tipset/address-detail?address=${miner.identicon}`}>filscan</a>,&nbsp;\n                        <a href={`https://filscout.io/en/pc/account?id=${miner.id}`}>filscout</a>\n                    )\n                </div>\n                <div>\n                    {\n                        head &&\n                        <span>Height <a href={`https://filfox.info/en/tipset/${head.Height}`}>{head.Height}</a></span>\n                    }\n                </div>\n            </div>\n\n            <div id=\"deposits\" className=\"section\">\n                <div className='grid'>\n                    {\n                        miner.deposits &&\n                        <Summary\n                            title={f(miner.deposits.collateral || 0)}\n                            desc=\"Collateral\" />\n                    }\n\n                    {\n                        miner.deposits &&\n                        <Summary\n                            title={f(miner.deposits.available || 0)}\n                            desc=\"Available\" />\n                    }\n\n                    {\n                        miner.deposits &&\n                        <Summary\n                            title={f(miner.deposits.locked || 0)}\n                            desc=\"Locked\" />\n                    }\n                </div>\n            </div>\n\n            <div id=\"sectors\">\n                <div className='grid'>\n                    {\n                        miner.deadlines &&\n                        <Summary\n                            title={f(miner.deadlines.SectorsCount || 0)}\n                            desc=\"Live Sectors\" />\n                    }\n                    {\n                        miner.deadlines &&\n                        <Summary\n                            title={f(miner.deadlines.ActiveCount || 0)}\n                            desc=\"Active Sectors\" />\n                    }\n                    {\n                        miner.deadlines &&\n                        <Summary\n                            title={f(miner.deadlines.FaultsCount || 0)}\n                            desc=\"Faulty Sectors\" />\n                    }\n                    {\n                        miner.preCommits &&\n                        <Summary\n                            title={f(miner.preCommits.Count || 0)}\n                            desc=\"PreCommits\" />\n                    }\n                </div>\n            </div>\n\n            <div className=\"section wpost\">\n                <div className='row'>\n                    <div className='col section-title'>\n                        <h3>WindowPoSt due</h3>\n                        <a data-tip data-for='wpost-desc'>(what is this?)</a>\n                        <ReactTooltip id='wpost-desc' effect='solid' place='top'>\n                            <span>List of 48 WindoPoSt submission deadlines ordered by due time (in epochs).<br/>Bars represent ~8TB disks to be proven, white are healthy disks, red are faulty.</span>\n                        </ReactTooltip>\n                    </div>\n                </div>\n                <WindowPoSt deadlines={miner.deadlines} head={head} />\n            </div>\n            <div id=\"provecommit\" className=\"section\">\n                <div className='row'>\n                    <div className='col section-title'>\n                        <h3>ProveCommits due</h3>\n                        <a data-tip data-for='provecommit-desc'>(what is this?)</a>\n                        <ReactTooltip id='provecommit-desc' effect='solid' place='top'>\n                            <span>List of ProveCommits ordered by due time (in epochs).<br/>Circles represent sectors to be proven.</span>\n                        </ReactTooltip>\n                    </div>\n                </div>\n                <div className=\"deadlines provecommit\">\n                    {\n                        miner.preCommits && miner.preCommits.PreCommitDeadlines.map(d =>\n                            <div className='deadline'>\n                                <div className=\"out\">\n                                    In {d.Expiry - head.Height}\n                                    {/* <span className=\"epochs\">epochs</span> */}\n                                </div>\n                                <div className=\"hddWrapper\">\n                                    <div className='in'>\n                                        {Math.round(d.Sectors.length )} sectors\n                                    </div>\n                                    <div className=\"hdds\">\n                                        {\n                                            d.Sectors.map(v =>\n                                                <div id={v} className={`hdd ${!!miner.sectors && !!miner.sectors.Sectors[v]}`}>{v == 215428 ? miner.sectors && miner.sectors.Sectors[v]  : ''}</div>\n                                            )\n                                        }\n                                    </div>\n                                </div>\n                            </div>\n                        )\n                    }\n\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}